# -*- coding: utf-8 -*-
"""Arpit_sarcastic_assignment_using_Dl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XrfhMhmCKOwwaQvMd0Gs_q3osknGGj44
"""

import tensorflow.compat.v1 as tf
tf.disable_v2_behavior()

#importing libraries
import pandas as pd
import numpy as np

#importing dataset from drive
df = pd.read_json("/content/drive/My Drive/Sarcasm_Headlines_Dataset.json",lines= True)

#taking a glance of a dataset
df.head()

# Commented out IPython magic to ensure Python compatibility.
#let's see our class label's
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
sns.countplot(df.is_sarcastic)
plt.xlabel('Label')
plt.title('Sarcasm vs Non-sarcasm')

#let's eliminate the extra symbols using regex
import re
df['headline'] = df['headline'].apply(lambda x: x.lower())
df['headline'] = df['headline'].apply((lambda x: re.sub('[^a-zA-z0-9\s]','',x)))

#let's convert into vector using tokenizer and convert text into sequence to feed into our NN
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
   
max_fatures = 2000
tokenizer = Tokenizer(num_words=max_fatures, split=' ')
tokenizer.fit_on_texts(df['headline'].values)
X = tokenizer.texts_to_sequences(df['headline'].values)
X = pad_sequences(X)

#spliting data
from sklearn.model_selection import train_test_split
Y = pd.get_dummies(df['is_sarcastic']).values
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.33, random_state = 42)
print(X_train.shape,Y_train.shape)
print(X_test.shape,Y_test.shape)

#defining LSTM model
from keras.models import Model
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, SpatialDropout1D
embed_dim = 128
lstm_out = 196

model = Sequential()
model.add(Embedding(max_fatures, embed_dim,input_length = X.shape[1]))
model.add(SpatialDropout1D(0.4))
model.add(LSTM(lstm_out, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(2,activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam',metrics = ['accuracy'])

batch_size = 16
history = model.fit(X_train, Y_train, epochs = 15, batch_size=batch_size, verbose = 2)

"""Training accuracy after 15 epochs = 0.9659 and it can be imporved with different batch size and increasing number of epochs"""

validation_size = 1500
X_validate = X_test[-validation_size:]
Y_validate = Y_test[-validation_size:]
X_test = X_test[:-validation_size]
Y_test = Y_test[:-validation_size]
score,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size)
print("score: %.2f" % (score))
print("acc: %.2f" % (acc))

# summarize history for accuracy
plt.plot(history.history['acc'])
#plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
plt.savefig('model_accuracy.png')
# summarize history for loss
plt.plot(history.history['loss'])
#plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
plt.savefig('model_loss.png')

#Save the model
from keras.models import Model
# serialize model to JSON
model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)
# serialize weights to HDF5
model.save_weights("model.h5")

